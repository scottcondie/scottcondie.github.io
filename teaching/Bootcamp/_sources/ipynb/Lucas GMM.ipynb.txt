{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lucas Tree model and GMM estimation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pandas_datareader.data as web\n",
    "import matplotlib.pyplot as plt\n",
    "import datetime\n",
    "from scipy.optimize import fsolve\n",
    "from scipy.optimize import broyden1\n",
    "from scipy.optimize import minimize\n",
    "from pprint import pprint\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rpce</th>\n",
       "      <th>w5000</th>\n",
       "      <th>tb</th>\n",
       "      <th>gdef</th>\n",
       "      <th>inf</th>\n",
       "      <th>w5000_d</th>\n",
       "      <th>R</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1971-01-01</th>\n",
       "      <td>2968.902</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.0444</td>\n",
       "      <td>23.536</td>\n",
       "      <td>1.015270</td>\n",
       "      <td>0.984959</td>\n",
       "      <td>1.122320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1971-04-01</th>\n",
       "      <td>2996.124</td>\n",
       "      <td>1.12</td>\n",
       "      <td>1.0386</td>\n",
       "      <td>23.846</td>\n",
       "      <td>1.013171</td>\n",
       "      <td>1.105440</td>\n",
       "      <td>1.011948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1971-07-01</th>\n",
       "      <td>3020.036</td>\n",
       "      <td>1.13</td>\n",
       "      <td>1.0540</td>\n",
       "      <td>24.088</td>\n",
       "      <td>1.010148</td>\n",
       "      <td>1.118647</td>\n",
       "      <td>0.992965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1971-10-01</th>\n",
       "      <td>3070.230</td>\n",
       "      <td>1.12</td>\n",
       "      <td>1.0446</td>\n",
       "      <td>24.288</td>\n",
       "      <td>1.008303</td>\n",
       "      <td>1.110777</td>\n",
       "      <td>1.046124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1972-01-01</th>\n",
       "      <td>3110.801</td>\n",
       "      <td>1.18</td>\n",
       "      <td>1.0338</td>\n",
       "      <td>24.664</td>\n",
       "      <td>1.015481</td>\n",
       "      <td>1.162011</td>\n",
       "      <td>1.077729</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1972-04-01</th>\n",
       "      <td>3170.159</td>\n",
       "      <td>1.26</td>\n",
       "      <td>1.0371</td>\n",
       "      <td>24.815</td>\n",
       "      <td>1.006122</td>\n",
       "      <td>1.252333</td>\n",
       "      <td>1.004674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1972-07-01</th>\n",
       "      <td>3219.095</td>\n",
       "      <td>1.27</td>\n",
       "      <td>1.0398</td>\n",
       "      <td>25.048</td>\n",
       "      <td>1.009389</td>\n",
       "      <td>1.258186</td>\n",
       "      <td>1.020280</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1972-10-01</th>\n",
       "      <td>3294.606</td>\n",
       "      <td>1.30</td>\n",
       "      <td>1.0474</td>\n",
       "      <td>25.366</td>\n",
       "      <td>1.012696</td>\n",
       "      <td>1.283703</td>\n",
       "      <td>1.070357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1973-01-01</th>\n",
       "      <td>3354.764</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1.0541</td>\n",
       "      <td>25.661</td>\n",
       "      <td>1.011630</td>\n",
       "      <td>1.374020</td>\n",
       "      <td>0.917591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1973-04-01</th>\n",
       "      <td>3353.357</td>\n",
       "      <td>1.28</td>\n",
       "      <td>1.0626</td>\n",
       "      <td>26.052</td>\n",
       "      <td>1.015237</td>\n",
       "      <td>1.260789</td>\n",
       "      <td>0.918401</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1973-07-01</th>\n",
       "      <td>3365.331</td>\n",
       "      <td>1.18</td>\n",
       "      <td>1.0801</td>\n",
       "      <td>26.549</td>\n",
       "      <td>1.019077</td>\n",
       "      <td>1.157910</td>\n",
       "      <td>1.075416</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1973-10-01</th>\n",
       "      <td>3355.493</td>\n",
       "      <td>1.27</td>\n",
       "      <td>1.0722</td>\n",
       "      <td>27.077</td>\n",
       "      <td>1.019888</td>\n",
       "      <td>1.245235</td>\n",
       "      <td>0.890522</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1974-01-01</th>\n",
       "      <td>3326.205</td>\n",
       "      <td>1.13</td>\n",
       "      <td>1.0777</td>\n",
       "      <td>27.592</td>\n",
       "      <td>1.019020</td>\n",
       "      <td>1.108909</td>\n",
       "      <td>0.977738</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1974-04-01</th>\n",
       "      <td>3337.864</td>\n",
       "      <td>1.11</td>\n",
       "      <td>1.0833</td>\n",
       "      <td>28.248</td>\n",
       "      <td>1.023775</td>\n",
       "      <td>1.084223</td>\n",
       "      <td>0.887369</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1974-07-01</th>\n",
       "      <td>3351.624</td>\n",
       "      <td>0.99</td>\n",
       "      <td>1.0755</td>\n",
       "      <td>29.067</td>\n",
       "      <td>1.028993</td>\n",
       "      <td>0.962105</td>\n",
       "      <td>0.747144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1974-10-01</th>\n",
       "      <td>3302.477</td>\n",
       "      <td>0.74</td>\n",
       "      <td>1.0746</td>\n",
       "      <td>29.923</td>\n",
       "      <td>1.029449</td>\n",
       "      <td>0.718831</td>\n",
       "      <td>1.101863</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1975-01-01</th>\n",
       "      <td>3330.127</td>\n",
       "      <td>0.81</td>\n",
       "      <td>1.0626</td>\n",
       "      <td>30.601</td>\n",
       "      <td>1.022658</td>\n",
       "      <td>0.792054</td>\n",
       "      <td>1.256363</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1975-04-01</th>\n",
       "      <td>3385.744</td>\n",
       "      <td>1.01</td>\n",
       "      <td>1.0561</td>\n",
       "      <td>31.059</td>\n",
       "      <td>1.014967</td>\n",
       "      <td>0.995106</td>\n",
       "      <td>1.165059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1975-07-01</th>\n",
       "      <td>3434.088</td>\n",
       "      <td>1.18</td>\n",
       "      <td>1.0613</td>\n",
       "      <td>31.612</td>\n",
       "      <td>1.017805</td>\n",
       "      <td>1.159358</td>\n",
       "      <td>0.882339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1975-10-01</th>\n",
       "      <td>3470.491</td>\n",
       "      <td>1.04</td>\n",
       "      <td>1.0596</td>\n",
       "      <td>32.139</td>\n",
       "      <td>1.016671</td>\n",
       "      <td>1.022947</td>\n",
       "      <td>1.083615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1976-01-01</th>\n",
       "      <td>3539.873</td>\n",
       "      <td>1.12</td>\n",
       "      <td>1.0487</td>\n",
       "      <td>32.473</td>\n",
       "      <td>1.010392</td>\n",
       "      <td>1.108480</td>\n",
       "      <td>1.160979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1976-04-01</th>\n",
       "      <td>3572.443</td>\n",
       "      <td>1.30</td>\n",
       "      <td>1.0486</td>\n",
       "      <td>32.803</td>\n",
       "      <td>1.010162</td>\n",
       "      <td>1.286922</td>\n",
       "      <td>1.020317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1976-07-01</th>\n",
       "      <td>3610.329</td>\n",
       "      <td>1.33</td>\n",
       "      <td>1.0523</td>\n",
       "      <td>33.226</td>\n",
       "      <td>1.012895</td>\n",
       "      <td>1.313068</td>\n",
       "      <td>1.017702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1976-10-01</th>\n",
       "      <td>3657.456</td>\n",
       "      <td>1.36</td>\n",
       "      <td>1.0492</td>\n",
       "      <td>33.815</td>\n",
       "      <td>1.017727</td>\n",
       "      <td>1.336311</td>\n",
       "      <td>1.045802</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1977-01-01</th>\n",
       "      <td>3699.293</td>\n",
       "      <td>1.42</td>\n",
       "      <td>1.0462</td>\n",
       "      <td>34.359</td>\n",
       "      <td>1.016088</td>\n",
       "      <td>1.397517</td>\n",
       "      <td>0.945578</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1977-04-01</th>\n",
       "      <td>3719.733</td>\n",
       "      <td>1.34</td>\n",
       "      <td>1.0454</td>\n",
       "      <td>34.841</td>\n",
       "      <td>1.014028</td>\n",
       "      <td>1.321462</td>\n",
       "      <td>1.046546</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1977-07-01</th>\n",
       "      <td>3755.186</td>\n",
       "      <td>1.40</td>\n",
       "      <td>1.0519</td>\n",
       "      <td>35.270</td>\n",
       "      <td>1.012313</td>\n",
       "      <td>1.382971</td>\n",
       "      <td>0.962486</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1977-10-01</th>\n",
       "      <td>3811.769</td>\n",
       "      <td>1.36</td>\n",
       "      <td>1.0616</td>\n",
       "      <td>36.036</td>\n",
       "      <td>1.021718</td>\n",
       "      <td>1.331091</td>\n",
       "      <td>1.021521</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1978-01-01</th>\n",
       "      <td>3833.825</td>\n",
       "      <td>1.38</td>\n",
       "      <td>1.0644</td>\n",
       "      <td>36.573</td>\n",
       "      <td>1.014902</td>\n",
       "      <td>1.359738</td>\n",
       "      <td>0.967781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1978-04-01</th>\n",
       "      <td>3915.624</td>\n",
       "      <td>1.34</td>\n",
       "      <td>1.0629</td>\n",
       "      <td>37.242</td>\n",
       "      <td>1.018292</td>\n",
       "      <td>1.315929</td>\n",
       "      <td>1.098702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-07-01</th>\n",
       "      <td>10063.083</td>\n",
       "      <td>41.37</td>\n",
       "      <td>1.0016</td>\n",
       "      <td>101.429</td>\n",
       "      <td>1.004566</td>\n",
       "      <td>41.181971</td>\n",
       "      <td>1.125067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-10-01</th>\n",
       "      <td>10166.127</td>\n",
       "      <td>46.57</td>\n",
       "      <td>1.0013</td>\n",
       "      <td>101.949</td>\n",
       "      <td>1.005127</td>\n",
       "      <td>46.332466</td>\n",
       "      <td>1.112449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-01-01</th>\n",
       "      <td>10217.123</td>\n",
       "      <td>51.77</td>\n",
       "      <td>1.0015</td>\n",
       "      <td>102.399</td>\n",
       "      <td>1.004414</td>\n",
       "      <td>51.542493</td>\n",
       "      <td>1.062445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-04-01</th>\n",
       "      <td>10237.676</td>\n",
       "      <td>55.16</td>\n",
       "      <td>1.0006</td>\n",
       "      <td>103.145</td>\n",
       "      <td>1.007285</td>\n",
       "      <td>54.761053</td>\n",
       "      <td>1.009587</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-07-01</th>\n",
       "      <td>10282.234</td>\n",
       "      <td>55.62</td>\n",
       "      <td>1.0004</td>\n",
       "      <td>103.768</td>\n",
       "      <td>1.006040</td>\n",
       "      <td>55.286070</td>\n",
       "      <td>0.840235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-10-01</th>\n",
       "      <td>10316.777</td>\n",
       "      <td>46.52</td>\n",
       "      <td>1.0002</td>\n",
       "      <td>103.917</td>\n",
       "      <td>1.001436</td>\n",
       "      <td>46.453298</td>\n",
       "      <td>1.115234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-01-01</th>\n",
       "      <td>10379.022</td>\n",
       "      <td>52.08</td>\n",
       "      <td>1.0003</td>\n",
       "      <td>104.466</td>\n",
       "      <td>1.005283</td>\n",
       "      <td>51.806304</td>\n",
       "      <td>1.128493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-04-01</th>\n",
       "      <td>10396.630</td>\n",
       "      <td>58.73</td>\n",
       "      <td>1.0008</td>\n",
       "      <td>104.943</td>\n",
       "      <td>1.004566</td>\n",
       "      <td>58.463053</td>\n",
       "      <td>0.967372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-07-01</th>\n",
       "      <td>10424.119</td>\n",
       "      <td>56.86</td>\n",
       "      <td>1.0010</td>\n",
       "      <td>105.508</td>\n",
       "      <td>1.005384</td>\n",
       "      <td>56.555512</td>\n",
       "      <td>1.064553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-10-01</th>\n",
       "      <td>10453.204</td>\n",
       "      <td>60.45</td>\n",
       "      <td>1.0010</td>\n",
       "      <td>105.935</td>\n",
       "      <td>1.004047</td>\n",
       "      <td>60.206340</td>\n",
       "      <td>1.000469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013-01-01</th>\n",
       "      <td>10502.300</td>\n",
       "      <td>60.47</td>\n",
       "      <td>1.0007</td>\n",
       "      <td>106.349</td>\n",
       "      <td>1.003908</td>\n",
       "      <td>60.234600</td>\n",
       "      <td>1.108354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013-04-01</th>\n",
       "      <td>10523.929</td>\n",
       "      <td>66.90</td>\n",
       "      <td>1.0006</td>\n",
       "      <td>106.570</td>\n",
       "      <td>1.002078</td>\n",
       "      <td>66.761266</td>\n",
       "      <td>1.038858</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013-07-01</th>\n",
       "      <td>10573.135</td>\n",
       "      <td>69.69</td>\n",
       "      <td>1.0004</td>\n",
       "      <td>107.084</td>\n",
       "      <td>1.004823</td>\n",
       "      <td>69.355490</td>\n",
       "      <td>1.065368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013-10-01</th>\n",
       "      <td>10662.222</td>\n",
       "      <td>74.27</td>\n",
       "      <td>1.0005</td>\n",
       "      <td>107.636</td>\n",
       "      <td>1.005155</td>\n",
       "      <td>73.889114</td>\n",
       "      <td>1.092243</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-01-01</th>\n",
       "      <td>10713.384</td>\n",
       "      <td>81.04</td>\n",
       "      <td>1.0004</td>\n",
       "      <td>108.083</td>\n",
       "      <td>1.004153</td>\n",
       "      <td>80.704842</td>\n",
       "      <td>1.026866</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-04-01</th>\n",
       "      <td>10805.115</td>\n",
       "      <td>83.34</td>\n",
       "      <td>1.0003</td>\n",
       "      <td>108.692</td>\n",
       "      <td>1.005635</td>\n",
       "      <td>82.873047</td>\n",
       "      <td>1.047802</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-07-01</th>\n",
       "      <td>10909.862</td>\n",
       "      <td>87.23</td>\n",
       "      <td>1.0003</td>\n",
       "      <td>109.187</td>\n",
       "      <td>1.004554</td>\n",
       "      <td>86.834542</td>\n",
       "      <td>0.982173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-10-01</th>\n",
       "      <td>11045.225</td>\n",
       "      <td>85.41</td>\n",
       "      <td>1.0002</td>\n",
       "      <td>109.345</td>\n",
       "      <td>1.001447</td>\n",
       "      <td>85.286585</td>\n",
       "      <td>1.065065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-01-01</th>\n",
       "      <td>11145.286</td>\n",
       "      <td>90.82</td>\n",
       "      <td>1.0003</td>\n",
       "      <td>109.326</td>\n",
       "      <td>0.999826</td>\n",
       "      <td>90.835784</td>\n",
       "      <td>1.008585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-04-01</th>\n",
       "      <td>11227.947</td>\n",
       "      <td>92.11</td>\n",
       "      <td>1.0002</td>\n",
       "      <td>109.916</td>\n",
       "      <td>1.005397</td>\n",
       "      <td>91.615578</td>\n",
       "      <td>1.011488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-07-01</th>\n",
       "      <td>11304.567</td>\n",
       "      <td>92.98</td>\n",
       "      <td>1.0003</td>\n",
       "      <td>110.286</td>\n",
       "      <td>1.003366</td>\n",
       "      <td>92.668060</td>\n",
       "      <td>0.923230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-10-01</th>\n",
       "      <td>11379.273</td>\n",
       "      <td>85.73</td>\n",
       "      <td>1.0002</td>\n",
       "      <td>110.513</td>\n",
       "      <td>1.002058</td>\n",
       "      <td>85.553906</td>\n",
       "      <td>1.058437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-01</th>\n",
       "      <td>11430.549</td>\n",
       "      <td>90.61</td>\n",
       "      <td>1.0026</td>\n",
       "      <td>110.582</td>\n",
       "      <td>1.000624</td>\n",
       "      <td>90.553462</td>\n",
       "      <td>1.008346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-04-01</th>\n",
       "      <td>11537.728</td>\n",
       "      <td>91.86</td>\n",
       "      <td>1.0023</td>\n",
       "      <td>111.249</td>\n",
       "      <td>1.006032</td>\n",
       "      <td>91.309248</td>\n",
       "      <td>1.027938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-07-01</th>\n",
       "      <td>11618.098</td>\n",
       "      <td>94.18</td>\n",
       "      <td>1.0030</td>\n",
       "      <td>111.628</td>\n",
       "      <td>1.003407</td>\n",
       "      <td>93.860240</td>\n",
       "      <td>1.041101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-10-01</th>\n",
       "      <td>11702.120</td>\n",
       "      <td>98.21</td>\n",
       "      <td>1.0033</td>\n",
       "      <td>112.190</td>\n",
       "      <td>1.005035</td>\n",
       "      <td>97.718031</td>\n",
       "      <td>1.042949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-01</th>\n",
       "      <td>11758.040</td>\n",
       "      <td>102.42</td>\n",
       "      <td>1.0051</td>\n",
       "      <td>112.746</td>\n",
       "      <td>1.004956</td>\n",
       "      <td>101.914922</td>\n",
       "      <td>1.059697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-04-01</th>\n",
       "      <td>11852.958</td>\n",
       "      <td>108.27</td>\n",
       "      <td>1.0080</td>\n",
       "      <td>113.029</td>\n",
       "      <td>1.002510</td>\n",
       "      <td>107.998915</td>\n",
       "      <td>1.026918</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-07-01</th>\n",
       "      <td>11916.576</td>\n",
       "      <td>111.48</td>\n",
       "      <td>1.0107</td>\n",
       "      <td>113.614</td>\n",
       "      <td>1.005176</td>\n",
       "      <td>110.905988</td>\n",
       "      <td>1.044363</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-10-01</th>\n",
       "      <td>12035.227</td>\n",
       "      <td>116.50</td>\n",
       "      <td>1.0107</td>\n",
       "      <td>114.275</td>\n",
       "      <td>1.005818</td>\n",
       "      <td>115.826130</td>\n",
       "      <td>1.064069</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>188 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 rpce   w5000      tb     gdef       inf     w5000_d         R\n",
       "DATE                                                                          \n",
       "1971-01-01   2968.902    1.00  1.0444   23.536  1.015270    0.984959  1.122320\n",
       "1971-04-01   2996.124    1.12  1.0386   23.846  1.013171    1.105440  1.011948\n",
       "1971-07-01   3020.036    1.13  1.0540   24.088  1.010148    1.118647  0.992965\n",
       "1971-10-01   3070.230    1.12  1.0446   24.288  1.008303    1.110777  1.046124\n",
       "1972-01-01   3110.801    1.18  1.0338   24.664  1.015481    1.162011  1.077729\n",
       "1972-04-01   3170.159    1.26  1.0371   24.815  1.006122    1.252333  1.004674\n",
       "1972-07-01   3219.095    1.27  1.0398   25.048  1.009389    1.258186  1.020280\n",
       "1972-10-01   3294.606    1.30  1.0474   25.366  1.012696    1.283703  1.070357\n",
       "1973-01-01   3354.764    1.39  1.0541   25.661  1.011630    1.374020  0.917591\n",
       "1973-04-01   3353.357    1.28  1.0626   26.052  1.015237    1.260789  0.918401\n",
       "1973-07-01   3365.331    1.18  1.0801   26.549  1.019077    1.157910  1.075416\n",
       "1973-10-01   3355.493    1.27  1.0722   27.077  1.019888    1.245235  0.890522\n",
       "1974-01-01   3326.205    1.13  1.0777   27.592  1.019020    1.108909  0.977738\n",
       "1974-04-01   3337.864    1.11  1.0833   28.248  1.023775    1.084223  0.887369\n",
       "1974-07-01   3351.624    0.99  1.0755   29.067  1.028993    0.962105  0.747144\n",
       "1974-10-01   3302.477    0.74  1.0746   29.923  1.029449    0.718831  1.101863\n",
       "1975-01-01   3330.127    0.81  1.0626   30.601  1.022658    0.792054  1.256363\n",
       "1975-04-01   3385.744    1.01  1.0561   31.059  1.014967    0.995106  1.165059\n",
       "1975-07-01   3434.088    1.18  1.0613   31.612  1.017805    1.159358  0.882339\n",
       "1975-10-01   3470.491    1.04  1.0596   32.139  1.016671    1.022947  1.083615\n",
       "1976-01-01   3539.873    1.12  1.0487   32.473  1.010392    1.108480  1.160979\n",
       "1976-04-01   3572.443    1.30  1.0486   32.803  1.010162    1.286922  1.020317\n",
       "1976-07-01   3610.329    1.33  1.0523   33.226  1.012895    1.313068  1.017702\n",
       "1976-10-01   3657.456    1.36  1.0492   33.815  1.017727    1.336311  1.045802\n",
       "1977-01-01   3699.293    1.42  1.0462   34.359  1.016088    1.397517  0.945578\n",
       "1977-04-01   3719.733    1.34  1.0454   34.841  1.014028    1.321462  1.046546\n",
       "1977-07-01   3755.186    1.40  1.0519   35.270  1.012313    1.382971  0.962486\n",
       "1977-10-01   3811.769    1.36  1.0616   36.036  1.021718    1.331091  1.021521\n",
       "1978-01-01   3833.825    1.38  1.0644   36.573  1.014902    1.359738  0.967781\n",
       "1978-04-01   3915.624    1.34  1.0629   37.242  1.018292    1.315929  1.098702\n",
       "...               ...     ...     ...      ...       ...         ...       ...\n",
       "2010-07-01  10063.083   41.37  1.0016  101.429  1.004566   41.181971  1.125067\n",
       "2010-10-01  10166.127   46.57  1.0013  101.949  1.005127   46.332466  1.112449\n",
       "2011-01-01  10217.123   51.77  1.0015  102.399  1.004414   51.542493  1.062445\n",
       "2011-04-01  10237.676   55.16  1.0006  103.145  1.007285   54.761053  1.009587\n",
       "2011-07-01  10282.234   55.62  1.0004  103.768  1.006040   55.286070  0.840235\n",
       "2011-10-01  10316.777   46.52  1.0002  103.917  1.001436   46.453298  1.115234\n",
       "2012-01-01  10379.022   52.08  1.0003  104.466  1.005283   51.806304  1.128493\n",
       "2012-04-01  10396.630   58.73  1.0008  104.943  1.004566   58.463053  0.967372\n",
       "2012-07-01  10424.119   56.86  1.0010  105.508  1.005384   56.555512  1.064553\n",
       "2012-10-01  10453.204   60.45  1.0010  105.935  1.004047   60.206340  1.000469\n",
       "2013-01-01  10502.300   60.47  1.0007  106.349  1.003908   60.234600  1.108354\n",
       "2013-04-01  10523.929   66.90  1.0006  106.570  1.002078   66.761266  1.038858\n",
       "2013-07-01  10573.135   69.69  1.0004  107.084  1.004823   69.355490  1.065368\n",
       "2013-10-01  10662.222   74.27  1.0005  107.636  1.005155   73.889114  1.092243\n",
       "2014-01-01  10713.384   81.04  1.0004  108.083  1.004153   80.704842  1.026866\n",
       "2014-04-01  10805.115   83.34  1.0003  108.692  1.005635   82.873047  1.047802\n",
       "2014-07-01  10909.862   87.23  1.0003  109.187  1.004554   86.834542  0.982173\n",
       "2014-10-01  11045.225   85.41  1.0002  109.345  1.001447   85.286585  1.065065\n",
       "2015-01-01  11145.286   90.82  1.0003  109.326  0.999826   90.835784  1.008585\n",
       "2015-04-01  11227.947   92.11  1.0002  109.916  1.005397   91.615578  1.011488\n",
       "2015-07-01  11304.567   92.98  1.0003  110.286  1.003366   92.668060  0.923230\n",
       "2015-10-01  11379.273   85.73  1.0002  110.513  1.002058   85.553906  1.058437\n",
       "2016-01-01  11430.549   90.61  1.0026  110.582  1.000624   90.553462  1.008346\n",
       "2016-04-01  11537.728   91.86  1.0023  111.249  1.006032   91.309248  1.027938\n",
       "2016-07-01  11618.098   94.18  1.0030  111.628  1.003407   93.860240  1.041101\n",
       "2016-10-01  11702.120   98.21  1.0033  112.190  1.005035   97.718031  1.042949\n",
       "2017-01-01  11758.040  102.42  1.0051  112.746  1.004956  101.914922  1.059697\n",
       "2017-04-01  11852.958  108.27  1.0080  113.029  1.002510  107.998915  1.026918\n",
       "2017-07-01  11916.576  111.48  1.0107  113.614  1.005176  110.905988  1.044363\n",
       "2017-10-01  12035.227  116.50  1.0107  114.275  1.005818  115.826130  1.064069\n",
       "\n",
       "[188 rows x 7 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def convert_to_daily_with_ffill(df):\n",
    "    '''convert_to_daily_with_ffill\n",
    "    \n",
    "    This method converts a dataframe to have a daily index and forward fills all of the missing days.  Useful for converting (for example) stock market data to quarterly data when the quarterly return is wanted.\n",
    "    \n",
    "    :param df: a pandas.DataFrame to be converted\n",
    "    :returns: a pandas.DataFrame that has been converted\n",
    "    '''\n",
    "    \n",
    "    new_idx = pd.date_range('01-01-1950', '07-01-2018')\n",
    "    df = df.reindex(new_idx)\n",
    "    df = df.fillna(method=\"ffill\")\n",
    "    return df\n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "start = datetime.datetime(1950, 1,1)\n",
    "end = datetime.datetime(2018, 7, 1)\n",
    "rpce = web.DataReader('PCECC96', 'fred', start, end)\n",
    "w5000 = web.DataReader('WILL5000INDFC', 'fred', start, end)\n",
    "w5000 = convert_to_daily_with_ffill(w5000)\n",
    "gdef = web.DataReader('GDPDEF', 'fred', start, end)\n",
    "tb = web.DataReader('TB3MS', 'fred', start, end)\n",
    "\n",
    "df = pd.DataFrame(columns=['rpce', 'w5000', 'tb', 'gdef'], index = rpce.index)\n",
    "df['rpce'] = rpce\n",
    "df['w5000'] = w5000\n",
    "df['gdef'] = gdef\n",
    "df['inf'] = df['gdef']/df['gdef'].shift(1)\n",
    "df['w5000_d'] = df['w5000']/df['inf']      # Deflated asset price returns\n",
    "df['R'] = df['w5000_d'].shift(-1)/df['w5000_d']   # Returns to asset prices\n",
    "df['tb'] = tb/100. + 1    # Convert to percentage and make a gross return \n",
    "df  = df.dropna(axis=0)   # Drop NaNs\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      fun: nan\n",
      " hess_inv: array([[1]])\n",
      "      jac: array([nan])\n",
      "  message: 'Desired error not necessarily achieved due to precision loss.'\n",
      "     nfev: 3\n",
      "      nit: 0\n",
      "     njev: 1\n",
      "   status: 2\n",
      "  success: False\n",
      "        x: array([3.])\n"
     ]
    }
   ],
   "source": [
    "class GMMEstimator_q1(object):\n",
    "    \"\"\"A GMM Estimator for question 1\"\"\"\n",
    "    def __init__(self, df):\n",
    "        self.df = df\n",
    "        self.beta = 0.99   # Since we are not changing this, I make it an instance property from the start.\n",
    "        \n",
    "    def calculate_m(self, gamma):\n",
    "        '''Define the SDF given values for beta and gamma'''\n",
    "        self.df['m'] = self.beta*(self.df['rpce'].shift(-1)/self.df['rpce'])**(-gamma)\n",
    "        #self.df = self.df.dropna(axis=0).copy()\n",
    "        \n",
    "    def objective(self,gamma):\n",
    "        self.calculate_m(gamma)\n",
    "        l = self.df.shape[0]\n",
    "        df = self.df.dropna(axis=0).copy()\n",
    "        self.df['ip'] = (1/l)*(self.df['m']*self.df['R'] - 1)\n",
    "        return np.dot(self.df['ip'].values, self.df['ip'].values)\n",
    "    \n",
    "        #cov = self.df[['m', 'R']].cov()['R']['m']\n",
    "        #ER = self.df['R'].mean()\n",
    "        #Em = self.df['m'].mean()\n",
    "        #dif = 1 - \n",
    "        #print(cov + ER*Em)\n",
    "        #return (1 - cov - ER*Em)**2\n",
    "        \n",
    "    def estimate(self, init):\n",
    "        '''Estimate values for beta and gamma'''\n",
    "        s = minimize(self.objective, init)\n",
    "        print(s)\n",
    "        \n",
    "        \n",
    "e = GMMEstimator_q1(df)\n",
    "#e.objective(2.0)\n",
    "e.estimate(3.0)     \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x20359ded630>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'fun': 0.33268058450798116,\n",
      " 'hess_inv': array([[25.47909069]]),\n",
      " 'jac': array([-1.86264515e-08]),\n",
      " 'message': 'Optimization terminated successfully.',\n",
      " 'nfev': 18,\n",
      " 'nit': 4,\n",
      " 'njev': 6,\n",
      " 'status': 0,\n",
      " 'success': True,\n",
      " 'x': array([2.7733041])}\n"
     ]
    }
   ],
   "source": [
    "class GMMEstimator_q3(object):\n",
    "    def __init__(self, df):\n",
    "        self.df = df\n",
    "        self.beta = 0.99   # Since we are not changing this, I make it an instance property from the start.\n",
    "        \n",
    "    def calculate_m(self, gamma):\n",
    "        '''Define the SDF given values for beta and gamma'''\n",
    "        self.df['m'] = self.beta*(self.df['rpce'].shift(-1)/self.df['rpce'])**(-gamma)\n",
    "        \n",
    "    def objective(self,gamma):\n",
    "        self.calculate_m(gamma)\n",
    "        #print(self.df)\n",
    "        #cov = self.df[['m', 'R']].cov()['R']['m']\n",
    "        #ER = self.df['R'].mean()\n",
    "        #Em = self.df['m'].mean()\n",
    "        self.df['inv_m'] = 1/self.df['m']\n",
    "        self.df['diff'] = (self.df['tb'] - self.df['inv_m'])**2\n",
    "        new_df = df.dropna(axis=0)\n",
    "        ob = new_df['diff'].values\n",
    "        #cov = df[['m', 'R']].cov()[\"R\"]['m']\n",
    "        #ER = df['R'].mean()\n",
    "        #Em = df['m'].mean()\n",
    "        return np.sum(ob)\n",
    "        \n",
    "    def estimate(self, init):\n",
    "        '''Estimate values for beta and gamma'''\n",
    "        #s, info, ier, msg = fsolve(self.objective, init, full_output=True)\n",
    "        s = minimize(self.objective, init)\n",
    "        pprint(s)\n",
    "        \n",
    "    def plot(self, min_value, max_value):\n",
    "        ar = np.linspace(min_value, max_value, 100)\n",
    "        out = [ self.objective(aa) for aa in ar]\n",
    "        plt.plot(ar, out)\n",
    "        plt.show()\n",
    "        \n",
    "e = GMMEstimator_q3(df)\n",
    "e.plot(0.1, 5.0)\n",
    "e.estimate(2.5)\n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'fun': 123.00641288916736,\n",
      " 'hess_inv': array([[ 0.00035324, -0.00069736],\n",
      "       [-0.00069736,  0.00324237]]),\n",
      " 'jac': array([-2.47955322e-05,  0.00000000e+00]),\n",
      " 'message': 'Desired error not necessarily achieved due to precision loss.',\n",
      " 'nfev': 85,\n",
      " 'nit': 14,\n",
      " 'njev': 21,\n",
      " 'status': 2,\n",
      " 'success': False,\n",
      " 'x': array([0.70945192, 0.70185419])}\n",
      "(50, 20) (50, 20)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'\\nfor ii in grid[0].shape[0]:\\n    for jj in grid[0].shape[1]:\\n        i = grid[0][ii,jj]\\n        j = grid[1][ii,jj]\\n        idx.append([ii,jj])\\n        params.append([i,j])\\n\\nobj = np.zeros(grid[0].shape)\\nobj_list = []\\nfor kk in params:\\n    obj_list.append(e.objective(kk))\\n    \\n# Now reshape\\n'"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class GMMEstimator_q4(object):\n",
    "    def __init__(self, df):\n",
    "        self.df = df\n",
    "        \n",
    "    def calculate_m(self, params):\n",
    "        '''Define the SDF given values for beta and gamma'''\n",
    "        beta, gamma = params\n",
    "        self.df['m'] = beta*(self.df['rpce'].shift(-1)/self.df['rpce'])**(-gamma)\n",
    "    \n",
    "    \n",
    "    def objective(self,params):\n",
    "        '''The function to be minimized.'''\n",
    "        self.calculate_m(params)\n",
    "        \n",
    "        #print(self.df)\n",
    "        #cov = self.df[['m', 'R']].cov()['R']['m']\n",
    "        #ER = self.df['R'].mean()\n",
    "        #Em = self.df['m'].mean()\n",
    "        self.df['inv_m'] = 1/self.df['m']\n",
    "        self.df['diff'] = (self.df['tb'] - self.df['inv_m'])**2\n",
    "        new_df = self.df.dropna(axis=0)\n",
    "        ob = new_df['diff'].values\n",
    "        ob1 = np.sum(ob)\n",
    "        l = new_df.shape[0]\n",
    "        df = new_df.dropna(axis=0).copy()\n",
    "        df['ip'] = (1/l)*(df['m'].dot(df['R']) - 1)\n",
    "        ob2 = np.dot(df['ip'].values, df['ip'].values)\n",
    "        \n",
    "        \n",
    "        #cov = df[['m', 'R']].cov()[\"R\"]['m']\n",
    "        #ER = df['R'].mean()\n",
    "        #Em = df['m'].mean()\n",
    "        return ob1 + ob2\n",
    "        \n",
    "    def estimate(self, init):\n",
    "        '''Estimate values for beta and gamma'''\n",
    "        #s, info, ier, msg = fsolve(self.objective, init, full_output=True)\n",
    "        s = minimize(self.objective, init)\n",
    "        pprint(s)\n",
    "        \n",
    "    def plot(self, min_value, max_value):\n",
    "        ar = np.linspace(min_value, max_value, 100)\n",
    "        out = [ self.objective(aa) for aa in ar]\n",
    "        plt.plot(ar, out)\n",
    "        plt.show()\n",
    "        \n",
    "e = GMMEstimator_q4(df)\n",
    "e.estimate([0.7, 50.0])\n",
    "\n",
    "\n",
    "b = np.linspace(0.01, 1.0, 20)\n",
    "g = np.linspace(0.01, 20.0, 50)\n",
    "bg = np.array\n",
    "grid = np.meshgrid(b,g)\n",
    "print(grid[0].shape, grid[1].shape)\n",
    "params = []\n",
    "idx = []\n",
    "\n",
    "\"\"\"\n",
    "for ii in grid[0].shape[0]:\n",
    "    for jj in grid[0].shape[1]:\n",
    "        i = grid[0][ii,jj]\n",
    "        j = grid[1][ii,jj]\n",
    "        idx.append([ii,jj])\n",
    "        params.append([i,j])\n",
    "\n",
    "obj = np.zeros(grid[0].shape)\n",
    "obj_list = []\n",
    "for kk in params:\n",
    "    obj_list.append(e.objective(kk))\n",
    "    \n",
    "# Now reshape\n",
    "\"\"\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
