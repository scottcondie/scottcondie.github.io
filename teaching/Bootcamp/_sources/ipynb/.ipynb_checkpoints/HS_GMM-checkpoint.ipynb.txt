{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Estimating the parameters of a Lucas Tree: Hansen and Singleton (1982)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pandas_datareader.data as web\n",
    "import matplotlib.pyplot as plt\n",
    "import datetime\n",
    "from scipy.optimize import fsolve\n",
    "from scipy.optimize import broyden1\n",
    "from scipy.optimize import minimize\n",
    "from pprint import pprint\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rpce</th>\n",
       "      <th>w5000</th>\n",
       "      <th>tb</th>\n",
       "      <th>gdef</th>\n",
       "      <th>inf</th>\n",
       "      <th>w5000_d</th>\n",
       "      <th>R</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1971-01-01</th>\n",
       "      <td>2968.902</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.0444</td>\n",
       "      <td>23.536</td>\n",
       "      <td>1.015270</td>\n",
       "      <td>0.984959</td>\n",
       "      <td>1.122320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1971-04-01</th>\n",
       "      <td>2996.124</td>\n",
       "      <td>1.12</td>\n",
       "      <td>1.0386</td>\n",
       "      <td>23.846</td>\n",
       "      <td>1.013171</td>\n",
       "      <td>1.105440</td>\n",
       "      <td>1.011948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1971-07-01</th>\n",
       "      <td>3020.036</td>\n",
       "      <td>1.13</td>\n",
       "      <td>1.0540</td>\n",
       "      <td>24.088</td>\n",
       "      <td>1.010148</td>\n",
       "      <td>1.118647</td>\n",
       "      <td>0.992965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1971-10-01</th>\n",
       "      <td>3070.230</td>\n",
       "      <td>1.12</td>\n",
       "      <td>1.0446</td>\n",
       "      <td>24.288</td>\n",
       "      <td>1.008303</td>\n",
       "      <td>1.110777</td>\n",
       "      <td>1.046124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1972-01-01</th>\n",
       "      <td>3110.801</td>\n",
       "      <td>1.18</td>\n",
       "      <td>1.0338</td>\n",
       "      <td>24.664</td>\n",
       "      <td>1.015481</td>\n",
       "      <td>1.162011</td>\n",
       "      <td>1.077729</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1972-04-01</th>\n",
       "      <td>3170.159</td>\n",
       "      <td>1.26</td>\n",
       "      <td>1.0371</td>\n",
       "      <td>24.815</td>\n",
       "      <td>1.006122</td>\n",
       "      <td>1.252333</td>\n",
       "      <td>1.004674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1972-07-01</th>\n",
       "      <td>3219.095</td>\n",
       "      <td>1.27</td>\n",
       "      <td>1.0398</td>\n",
       "      <td>25.048</td>\n",
       "      <td>1.009389</td>\n",
       "      <td>1.258186</td>\n",
       "      <td>1.020280</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1972-10-01</th>\n",
       "      <td>3294.606</td>\n",
       "      <td>1.30</td>\n",
       "      <td>1.0474</td>\n",
       "      <td>25.366</td>\n",
       "      <td>1.012696</td>\n",
       "      <td>1.283703</td>\n",
       "      <td>1.070357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1973-01-01</th>\n",
       "      <td>3354.764</td>\n",
       "      <td>1.39</td>\n",
       "      <td>1.0541</td>\n",
       "      <td>25.661</td>\n",
       "      <td>1.011630</td>\n",
       "      <td>1.374020</td>\n",
       "      <td>0.917591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1973-04-01</th>\n",
       "      <td>3353.357</td>\n",
       "      <td>1.28</td>\n",
       "      <td>1.0626</td>\n",
       "      <td>26.052</td>\n",
       "      <td>1.015237</td>\n",
       "      <td>1.260789</td>\n",
       "      <td>0.918401</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                rpce  w5000      tb    gdef       inf   w5000_d         R\n",
       "DATE                                                                     \n",
       "1971-01-01  2968.902   1.00  1.0444  23.536  1.015270  0.984959  1.122320\n",
       "1971-04-01  2996.124   1.12  1.0386  23.846  1.013171  1.105440  1.011948\n",
       "1971-07-01  3020.036   1.13  1.0540  24.088  1.010148  1.118647  0.992965\n",
       "1971-10-01  3070.230   1.12  1.0446  24.288  1.008303  1.110777  1.046124\n",
       "1972-01-01  3110.801   1.18  1.0338  24.664  1.015481  1.162011  1.077729\n",
       "1972-04-01  3170.159   1.26  1.0371  24.815  1.006122  1.252333  1.004674\n",
       "1972-07-01  3219.095   1.27  1.0398  25.048  1.009389  1.258186  1.020280\n",
       "1972-10-01  3294.606   1.30  1.0474  25.366  1.012696  1.283703  1.070357\n",
       "1973-01-01  3354.764   1.39  1.0541  25.661  1.011630  1.374020  0.917591\n",
       "1973-04-01  3353.357   1.28  1.0626  26.052  1.015237  1.260789  0.918401"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def convert_to_daily_with_ffill(df):\n",
    "    '''convert_to_daily_with_ffill\n",
    "    \n",
    "    This method converts a dataframe to have a daily index and forward fills all of the missing days.  Useful for converting (for example) stock market data to quarterly data when the quarterly return is wanted.\n",
    "    \n",
    "    :param df: a pandas.DataFrame to be converted\n",
    "    :returns: a pandas.DataFrame that has been converted\n",
    "    '''\n",
    "    \n",
    "    new_idx = pd.date_range('01-01-1950', '07-01-2018')\n",
    "    df = df.reindex(new_idx)\n",
    "    df = df.fillna(method=\"ffill\")\n",
    "    return df\n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "start = datetime.datetime(1950, 1,1)\n",
    "end = datetime.datetime(2018, 7, 1)\n",
    "rpce = web.DataReader('PCECC96', 'fred', start, end)\n",
    "w5000 = web.DataReader('WILL5000INDFC', 'fred', start, end)\n",
    "w5000 = convert_to_daily_with_ffill(w5000)\n",
    "gdef = web.DataReader('GDPDEF', 'fred', start, end)\n",
    "tb = web.DataReader('TB3MS', 'fred', start, end)\n",
    "\n",
    "df = pd.DataFrame(columns=['rpce', 'w5000', 'tb', 'gdef'], index = rpce.index)\n",
    "df['rpce'] = rpce\n",
    "df['w5000'] = w5000\n",
    "df['gdef'] = gdef\n",
    "df['inf'] = df['gdef']/df['gdef'].shift(1)\n",
    "df['w5000_d'] = df['w5000']/df['inf']      # Deflated asset price returns\n",
    "df['R'] = df['w5000_d'].shift(-1)/df['w5000_d']   # Returns to asset prices\n",
    "df['tb'] = tb/100. + 1    # Convert to percentage and make a gross return \n",
    "df  = df.dropna(axis=0)   # Drop NaNs\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      fun: 3.1866964156783745e-05\n",
      " hess_inv: array([[993634.27128949]])\n",
      "      jac: array([4.54747351e-13])\n",
      "  message: 'Optimization terminated successfully.'\n",
      "     nfev: 57\n",
      "      nit: 11\n",
      "     njev: 19\n",
      "   status: 0\n",
      "  success: True\n",
      "        x: array([3.76150208])\n"
     ]
    }
   ],
   "source": [
    "class GMMEstimator_q1(object):\n",
    "    \"\"\"A GMM Estimator for question 1\"\"\"\n",
    "    def __init__(self, df):\n",
    "        self.df = df\n",
    "        self.beta = 0.99   # Since we are not changing this, \n",
    "                           # I make it an instance property from the start.\n",
    "        \n",
    "    def calculate_m(self, gamma):\n",
    "        '''Define the SDF given values for beta and gamma'''\n",
    "        self.df['m'] = self.beta*(self.df['rpce'].shift(-1)/self.df['rpce'])**(-gamma)\n",
    "        #self.df = self.df.dropna(axis=0).copy()\n",
    "        \n",
    "    def objective(self,gamma):\n",
    "        '''The objective to be minimized.'''\n",
    "        self.calculate_m(gamma)     # Calculate the SDF given gamma\n",
    "        df = self.df.copy().dropna(axis=0)\n",
    "        l = df.shape[0]\n",
    "        df['ip'] = (1/l)*(df['m']*df['R'] - 1)\n",
    "        return np.dot(df['ip'].values, df['ip'].values)\n",
    "        \n",
    "    def estimate(self, init):\n",
    "        '''Estimate values for beta and gamma'''\n",
    "        s = minimize(self.objective, init, tol=1e-10 )\n",
    "        print(s)\n",
    "        \n",
    "        \n",
    "e = GMMEstimator_q1(df)\n",
    "e.estimate(100.0)     \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1e41000e518>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'fun': 0.33268058450798116,\n",
      " 'hess_inv': array([[25.47909069]]),\n",
      " 'jac': array([-1.86264515e-08]),\n",
      " 'message': 'Optimization terminated successfully.',\n",
      " 'nfev': 18,\n",
      " 'nit': 4,\n",
      " 'njev': 6,\n",
      " 'status': 0,\n",
      " 'success': True,\n",
      " 'x': array([2.7733041])}\n"
     ]
    }
   ],
   "source": [
    "class GMMEstimator_q3(object):\n",
    "    def __init__(self, df):\n",
    "        self.df = df\n",
    "        self.beta = 0.99   # Since we are not changing this, I make it an instance property from the start.\n",
    "        \n",
    "    def calculate_m(self, gamma):\n",
    "        '''Define the SDF given values for beta and gamma'''\n",
    "        self.df['m'] = self.beta*(self.df['rpce'].shift(-1)/self.df['rpce'])**(-gamma)\n",
    "        \n",
    "    def objective(self,gamma):\n",
    "        self.calculate_m(gamma)\n",
    "        #print(self.df)\n",
    "        #cov = self.df[['m', 'R']].cov()['R']['m']\n",
    "        #ER = self.df['R'].mean()\n",
    "        #Em = self.df['m'].mean()\n",
    "        self.df['inv_m'] = 1/self.df['m']\n",
    "        self.df['diff'] = (self.df['tb'] - self.df['inv_m'])**2\n",
    "        new_df = df.dropna(axis=0)\n",
    "        ob = new_df['diff'].values\n",
    "        #cov = df[['m', 'R']].cov()[\"R\"]['m']\n",
    "        #ER = df['R'].mean()\n",
    "        #Em = df['m'].mean()\n",
    "        return np.sum(ob)\n",
    "        \n",
    "    def estimate(self, init):\n",
    "        '''Estimate values for beta and gamma'''\n",
    "        #s, info, ier, msg = fsolve(self.objective, init, full_output=True)\n",
    "        s = minimize(self.objective, init)\n",
    "        pprint(s)\n",
    "        \n",
    "    def plot(self, min_value, max_value):\n",
    "        ar = np.linspace(min_value, max_value, 100)\n",
    "        out = [ self.objective(aa) for aa in ar]\n",
    "        plt.plot(ar, out)\n",
    "        plt.show()\n",
    "        \n",
    "e = GMMEstimator_q3(df)\n",
    "e.plot(0.1, 5.0)\n",
    "e.estimate(2.5)\n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'fun': 123.00641288916736,\n",
      " 'hess_inv': array([[ 0.00035324, -0.00069736],\n",
      "       [-0.00069736,  0.00324237]]),\n",
      " 'jac': array([-2.47955322e-05,  0.00000000e+00]),\n",
      " 'message': 'Desired error not necessarily achieved due to precision loss.',\n",
      " 'nfev': 85,\n",
      " 'nit': 14,\n",
      " 'njev': 21,\n",
      " 'status': 2,\n",
      " 'success': False,\n",
      " 'x': array([0.70945192, 0.70185419])}\n",
      "(50, 20) (50, 20)\n"
     ]
    }
   ],
   "source": [
    "class GMMEstimator_q4(object):\n",
    "    def __init__(self, df):\n",
    "        self.df = df\n",
    "        \n",
    "    def calculate_m(self, params):\n",
    "        '''Define the SDF given values for beta and gamma'''\n",
    "        beta, gamma = params\n",
    "        self.df['m'] = beta*(self.df['rpce'].shift(-1)/self.df['rpce'])**(-gamma)\n",
    "    \n",
    "    \n",
    "    def objective(self,params):\n",
    "        '''The function to be minimized.'''\n",
    "        self.calculate_m(params)\n",
    "        \n",
    "        #print(self.df)\n",
    "        #cov = self.df[['m', 'R']].cov()['R']['m']\n",
    "        #ER = self.df['R'].mean()\n",
    "        #Em = self.df['m'].mean()\n",
    "        self.df['inv_m'] = 1/self.df['m']\n",
    "        self.df['diff'] = (self.df['tb'] - self.df['inv_m'])**2\n",
    "        new_df = self.df.dropna(axis=0)\n",
    "        ob = new_df['diff'].values\n",
    "        ob1 = np.sum(ob)\n",
    "        l = new_df.shape[0]\n",
    "        df = new_df.dropna(axis=0).copy()\n",
    "        df['ip'] = (1/l)*(df['m'].dot(df['R']) - 1)\n",
    "        ob2 = np.dot(df['ip'].values, df['ip'].values)\n",
    "        \n",
    "        \n",
    "        #cov = df[['m', 'R']].cov()[\"R\"]['m']\n",
    "        #ER = df['R'].mean()\n",
    "        #Em = df['m'].mean()\n",
    "        return ob1 + ob2\n",
    "        \n",
    "    def estimate(self, init):\n",
    "        '''Estimate values for beta and gamma'''\n",
    "        #s, info, ier, msg = fsolve(self.objective, init, full_output=True)\n",
    "        s = minimize(self.objective, init, tol=1e-8)\n",
    "        pprint(s)\n",
    "        \n",
    "    def plot(self, min_value, max_value):\n",
    "        ar = np.linspace(min_value, max_value, 100)\n",
    "        out = [ self.objective(aa) for aa in ar]\n",
    "        plt.plot(ar, out)\n",
    "        plt.show()\n",
    "        \n",
    "e = GMMEstimator_q4(df)\n",
    "e.estimate([0.7, 50.0])\n",
    "\n",
    "\n",
    "b = np.linspace(0.01, 1.0, 20)\n",
    "g = np.linspace(0.01, 20.0, 50)\n",
    "bg = np.array\n",
    "grid = np.meshgrid(b,g)\n",
    "print(grid[0].shape, grid[1].shape)\n",
    "params = []\n",
    "idx = []\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
