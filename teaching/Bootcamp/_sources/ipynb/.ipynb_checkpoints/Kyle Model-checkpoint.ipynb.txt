{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pickle\n",
    "from pprint import pprint\n",
    "import os\n",
    "import statsmodels.formula.api as sm\n",
    "import patsy as pt\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['AAPL', 'C', 'GBX', 'SPY', 'THO'])\n"
     ]
    }
   ],
   "source": [
    "data_folder = \"./Kyle_Data/\"\n",
    "file_list = [\"AAPL\", \"C\", \"GBX\", \"SPY\", \"THO\"]\n",
    "\n",
    "\n",
    "file_objects = [open(os.path.join(data_folder, ii), 'rb') for ii in file_list]\n",
    "data = {ii: pickle.load(jj) for (ii,jj) in zip(file_list, file_objects)}\n",
    "print(data.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.958\n",
      "Model:                            OLS   Adj. R-squared:                  0.958\n",
      "Method:                 Least Squares   F-statistic:                 5.769e+04\n",
      "Date:                Mon, 09 Jul 2018   Prob (F-statistic):               0.00\n",
      "Time:                        13:28:38   Log-Likelihood:                -34913.\n",
      "No. Observations:                2552   AIC:                         6.983e+04\n",
      "Df Residuals:                    2550   BIC:                         6.984e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept    1.06e+07   4.47e+04    236.896      0.000    1.05e+07    1.07e+07\n",
      "P          -7.316e+04    304.591   -240.188      0.000   -7.38e+04   -7.26e+04\n",
      "==============================================================================\n",
      "Omnibus:                       18.498   Durbin-Watson:                   0.002\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               18.429\n",
      "Skew:                           0.192   Prob(JB):                     9.96e-05\n",
      "Kurtosis:                       2.841   Cond. No.                     1.57e+03\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.57e+03. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "class OrderBook(object):\n",
    "    def __init__(self, ob_data):\n",
    "        '''This class represents an order book at any point in time.  The time stamp of the orderbok is saved as an attribute of the dataframe df.timestamp'''\n",
    "        data_list = []\n",
    "        for ii in ob_data[1].items():\n",
    "            data_list.append((ii[0],ii[1][0], ii[1][1]))\n",
    "            \n",
    "        df = pd.DataFrame.from_records(data_list, columns=[\"P\",\"Q\",\"S\"])\n",
    "        df.timestamp = ob_data[0]\n",
    "        df = df.sort_values(by=[\"P\"])\n",
    "        \n",
    "        # Now make the orderbook cumulative.\n",
    "        #Bid side first\n",
    "        df_bids = df[df['S'] == \"B\"]\n",
    "        \n",
    "        df_bids = df_bids.sort_values(by=\"P\", ascending=False)\n",
    "        df_bids['tot_y'] = df_bids['Q'].cumsum()\n",
    "        #print(df_bids)\n",
    "        \n",
    "        # Now ask side\n",
    "        df_asks = df[df['S'] == 'S']\n",
    "        df_asks = df_asks.sort_values(by=\"P\", ascending=True)\n",
    "        # Note that when y is negative, the buy side of the orderbook will be used (since liq. demanders want to sell)\n",
    "        df_asks['tot_y'] = -df_asks['Q'].cumsum()\n",
    "        self.df = pd.concat([df_bids, df_asks], axis=0)\n",
    "        \n",
    "        self.df['y'] = self.df['tot_y']\n",
    "        self.df = self.df.drop('tot_y', axis=1)\n",
    "        \n",
    "\n",
    "    def estimate_slope(self, lower, upper):\n",
    "        '''Estimate the slope of the orderbook using prices between lower and upper.'''\n",
    "        df = self.df[(self.df['P'] >= lower) & (self.df['P'] <= upper)]\n",
    "        df = df.sort_values([\"P\"])\n",
    "        model = sm.ols(formula='y ~ P', data=df).fit()\n",
    "        print(model.summary())\n",
    "        \n",
    "        \n",
    "        \n",
    "            \n",
    "    def plot(self, lower, upper):\n",
    "        '''Plot the orderbook between prices lower and upper.'''\n",
    "        df = self.df[(self.df['P'] >= lower) & (self.df['P'] <= upper)]\n",
    "        df = df.sort_values([\"P\"])\n",
    "        plt.plot(df['P'], df['y'])\n",
    "        \n",
    "        plt.show()\n",
    "        \n",
    "        \n",
    "\n",
    "ob1 = OrderBook(data['AAPL'][0])\n",
    "ob1.estimate_slope(120, 180)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
